// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(lipalightninglibFFI)
import lipalightninglibFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_lipalightninglib_3a2_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_lipalightninglib_3a2_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
    (_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
    {
    try makeRustCall(callback, errorHandler: { return try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
        case CALL_SUCCESS:
            return returnedVal

        case CALL_ERROR:
            throw try errorHandler(callStatus.errorBuf)

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterTimestamp: FfiConverterRustBuffer {
    typealias SwiftType = Date

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Date {
        let seconds: Int64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        if seconds >= 0 {
            let delta = Double(seconds) + (Double(nanoseconds) / 1.0e9)
            return Date.init(timeIntervalSince1970: delta)
        } else {
            let delta = Double(seconds) - (Double(nanoseconds) / 1.0e9)
            return Date.init(timeIntervalSince1970: delta)
        }
    }

    public static func write(_ value: Date, into buf: inout [UInt8]) {
        var delta = value.timeIntervalSince1970
        var sign: Int64 = 1
        if delta < 0 {
            // The nanoseconds portion of the epoch offset must always be
            // positive, to simplify the calculation we will use the absolute
            // value of the offset.
            sign = -1
            delta = -delta
        }
        if delta.rounded(.down) > Double(Int64.max) {
            fatalError("Timestamp overflow, exceeds max bounds supported by Uniffi")
        }
        let seconds = Int64(delta)
        let nanoseconds = UInt32((delta - Double(seconds)) * 1.0e9)
        writeInt(&buf, sign * seconds)
        writeInt(&buf, nanoseconds)
    }
}

fileprivate struct FfiConverterDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TimeInterval {
        let seconds: UInt64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        return Double(seconds) + (Double(nanoseconds) / 1.0e9)
    }

    public static func write(_ value: TimeInterval, into buf: inout [UInt8]) {
        if value.rounded(.down) > Double(Int64.max) {
            fatalError("Duration overflow, exceeds max bounds supported by Uniffi")
        }

        if value < 0 {
            fatalError("Invalid duration, must be non-negative")
        }

        let seconds = UInt64(value)
        let nanoseconds = UInt32((value - Double(seconds)) * 1.0e9)
        writeInt(&buf, seconds)
        writeInt(&buf, nanoseconds)
    }
}


public protocol LightningNodeProtocol {
    func `getNodeInfo`()  -> NodeInfo
    func `queryLspFee`() throws -> LspFee
    func `createInvoice`(`amountMsat`: UInt64, `description`: String, `metadata`: String) throws -> InvoiceDetails
    func `decodeInvoice`(`invoice`: String) throws -> InvoiceDetails
    func `payInvoice`(`invoice`: String, `metadata`: String) throws
    func `getLatestPayments`(`numberOfPayments`: UInt32) throws -> [Payment]
    func `getPayment`(`hash`: String) throws -> Payment
    func `foreground`() 
    func `background`() 
    func `listCurrencyCodes`() throws -> [String]
    func `getExchangeRates`() throws -> ExchangeRates
    func `changeFiatCurrency`(`fiatCurrency`: String) 
    
}

public class LightningNode: LightningNodeProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(`config`: Config, `eventsCallback`: EventsCallback) throws {
        self.init(unsafeFromRawPointer: try
    
    rustCallWithError(FfiConverterTypeLnError.self) {
    
    lipalightninglib_3a2_LightningNode_new(
        FfiConverterTypeConfig.lower(`config`), 
        FfiConverterCallbackInterfaceEventsCallback.lower(`eventsCallback`), $0)
})
    }

    deinit {
        try! rustCall { ffi_lipalightninglib_3a2_LightningNode_object_free(pointer, $0) }
    }

    

    
    public func `getNodeInfo`()  -> NodeInfo {
        return try! FfiConverterTypeNodeInfo.lift(
            try!
    rustCall() {
    
    lipalightninglib_3a2_LightningNode_get_node_info(self.pointer, $0
    )
}
        )
    }
    public func `queryLspFee`() throws -> LspFee {
        return try FfiConverterTypeLspFee.lift(
            try
    rustCallWithError(FfiConverterTypeLnError.self) {
    lipalightninglib_3a2_LightningNode_query_lsp_fee(self.pointer, $0
    )
}
        )
    }
    public func `createInvoice`(`amountMsat`: UInt64, `description`: String, `metadata`: String) throws -> InvoiceDetails {
        return try FfiConverterTypeInvoiceDetails.lift(
            try
    rustCallWithError(FfiConverterTypeLnError.self) {
    lipalightninglib_3a2_LightningNode_create_invoice(self.pointer, 
        FfiConverterUInt64.lower(`amountMsat`), 
        FfiConverterString.lower(`description`), 
        FfiConverterString.lower(`metadata`), $0
    )
}
        )
    }
    public func `decodeInvoice`(`invoice`: String) throws -> InvoiceDetails {
        return try FfiConverterTypeInvoiceDetails.lift(
            try
    rustCallWithError(FfiConverterTypeLnError.self) {
    lipalightninglib_3a2_LightningNode_decode_invoice(self.pointer, 
        FfiConverterString.lower(`invoice`), $0
    )
}
        )
    }
    public func `payInvoice`(`invoice`: String, `metadata`: String) throws {
        try
    rustCallWithError(FfiConverterTypeLnError.self) {
    lipalightninglib_3a2_LightningNode_pay_invoice(self.pointer, 
        FfiConverterString.lower(`invoice`), 
        FfiConverterString.lower(`metadata`), $0
    )
}
    }
    public func `getLatestPayments`(`numberOfPayments`: UInt32) throws -> [Payment] {
        return try FfiConverterSequenceTypePayment.lift(
            try
    rustCallWithError(FfiConverterTypeLnError.self) {
    lipalightninglib_3a2_LightningNode_get_latest_payments(self.pointer, 
        FfiConverterUInt32.lower(`numberOfPayments`), $0
    )
}
        )
    }
    public func `getPayment`(`hash`: String) throws -> Payment {
        return try FfiConverterTypePayment.lift(
            try
    rustCallWithError(FfiConverterTypeLnError.self) {
    lipalightninglib_3a2_LightningNode_get_payment(self.pointer, 
        FfiConverterString.lower(`hash`), $0
    )
}
        )
    }
    public func `foreground`()  {
        try!
    rustCall() {
    
    lipalightninglib_3a2_LightningNode_foreground(self.pointer, $0
    )
}
    }
    public func `background`()  {
        try!
    rustCall() {
    
    lipalightninglib_3a2_LightningNode_background(self.pointer, $0
    )
}
    }
    public func `listCurrencyCodes`() throws -> [String] {
        return try FfiConverterSequenceString.lift(
            try
    rustCallWithError(FfiConverterTypeLnError.self) {
    lipalightninglib_3a2_LightningNode_list_currency_codes(self.pointer, $0
    )
}
        )
    }
    public func `getExchangeRates`() throws -> ExchangeRates {
        return try FfiConverterTypeExchangeRates.lift(
            try
    rustCallWithError(FfiConverterTypeLnError.self) {
    lipalightninglib_3a2_LightningNode_get_exchange_rates(self.pointer, $0
    )
}
        )
    }
    public func `changeFiatCurrency`(`fiatCurrency`: String)  {
        try!
    rustCall() {
    
    lipalightninglib_3a2_LightningNode_change_fiat_currency(self.pointer, 
        FfiConverterString.lower(`fiatCurrency`), $0
    )
}
    }
    
}


public struct FfiConverterTypeLightningNode: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LightningNode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LightningNode {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LightningNode, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LightningNode {
        return LightningNode(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LightningNode) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public struct ChannelsInfo {
    public var `numChannels`: UInt16
    public var `numUsableChannels`: UInt16
    public var `localBalanceMsat`: UInt64
    public var `inboundCapacityMsat`: UInt64
    public var `outboundCapacityMsat`: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`numChannels`: UInt16, `numUsableChannels`: UInt16, `localBalanceMsat`: UInt64, `inboundCapacityMsat`: UInt64, `outboundCapacityMsat`: UInt64) {
        self.`numChannels` = `numChannels`
        self.`numUsableChannels` = `numUsableChannels`
        self.`localBalanceMsat` = `localBalanceMsat`
        self.`inboundCapacityMsat` = `inboundCapacityMsat`
        self.`outboundCapacityMsat` = `outboundCapacityMsat`
    }
}


extension ChannelsInfo: Equatable, Hashable {
    public static func ==(lhs: ChannelsInfo, rhs: ChannelsInfo) -> Bool {
        if lhs.`numChannels` != rhs.`numChannels` {
            return false
        }
        if lhs.`numUsableChannels` != rhs.`numUsableChannels` {
            return false
        }
        if lhs.`localBalanceMsat` != rhs.`localBalanceMsat` {
            return false
        }
        if lhs.`inboundCapacityMsat` != rhs.`inboundCapacityMsat` {
            return false
        }
        if lhs.`outboundCapacityMsat` != rhs.`outboundCapacityMsat` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`numChannels`)
        hasher.combine(`numUsableChannels`)
        hasher.combine(`localBalanceMsat`)
        hasher.combine(`inboundCapacityMsat`)
        hasher.combine(`outboundCapacityMsat`)
    }
}


public struct FfiConverterTypeChannelsInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChannelsInfo {
        return try ChannelsInfo(
            `numChannels`: FfiConverterUInt16.read(from: &buf), 
            `numUsableChannels`: FfiConverterUInt16.read(from: &buf), 
            `localBalanceMsat`: FfiConverterUInt64.read(from: &buf), 
            `inboundCapacityMsat`: FfiConverterUInt64.read(from: &buf), 
            `outboundCapacityMsat`: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: ChannelsInfo, into buf: inout [UInt8]) {
        FfiConverterUInt16.write(value.`numChannels`, into: &buf)
        FfiConverterUInt16.write(value.`numUsableChannels`, into: &buf)
        FfiConverterUInt64.write(value.`localBalanceMsat`, into: &buf)
        FfiConverterUInt64.write(value.`inboundCapacityMsat`, into: &buf)
        FfiConverterUInt64.write(value.`outboundCapacityMsat`, into: &buf)
    }
}


public func FfiConverterTypeChannelsInfo_lift(_ buf: RustBuffer) throws -> ChannelsInfo {
    return try FfiConverterTypeChannelsInfo.lift(buf)
}

public func FfiConverterTypeChannelsInfo_lower(_ value: ChannelsInfo) -> RustBuffer {
    return FfiConverterTypeChannelsInfo.lower(value)
}


public struct Config {
    public var `network`: Network
    public var `seed`: [UInt8]
    public var `fiatCurrency`: String
    public var `esploraApiUrl`: String
    public var `rgsUrl`: String
    public var `lspUrl`: String
    public var `lspToken`: String
    public var `localPersistencePath`: String
    public var `timezoneConfig`: TzConfig
    public var `graphqlUrl`: String
    public var `backendHealthUrl`: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`network`: Network, `seed`: [UInt8], `fiatCurrency`: String, `esploraApiUrl`: String, `rgsUrl`: String, `lspUrl`: String, `lspToken`: String, `localPersistencePath`: String, `timezoneConfig`: TzConfig, `graphqlUrl`: String, `backendHealthUrl`: String) {
        self.`network` = `network`
        self.`seed` = `seed`
        self.`fiatCurrency` = `fiatCurrency`
        self.`esploraApiUrl` = `esploraApiUrl`
        self.`rgsUrl` = `rgsUrl`
        self.`lspUrl` = `lspUrl`
        self.`lspToken` = `lspToken`
        self.`localPersistencePath` = `localPersistencePath`
        self.`timezoneConfig` = `timezoneConfig`
        self.`graphqlUrl` = `graphqlUrl`
        self.`backendHealthUrl` = `backendHealthUrl`
    }
}


extension Config: Equatable, Hashable {
    public static func ==(lhs: Config, rhs: Config) -> Bool {
        if lhs.`network` != rhs.`network` {
            return false
        }
        if lhs.`seed` != rhs.`seed` {
            return false
        }
        if lhs.`fiatCurrency` != rhs.`fiatCurrency` {
            return false
        }
        if lhs.`esploraApiUrl` != rhs.`esploraApiUrl` {
            return false
        }
        if lhs.`rgsUrl` != rhs.`rgsUrl` {
            return false
        }
        if lhs.`lspUrl` != rhs.`lspUrl` {
            return false
        }
        if lhs.`lspToken` != rhs.`lspToken` {
            return false
        }
        if lhs.`localPersistencePath` != rhs.`localPersistencePath` {
            return false
        }
        if lhs.`timezoneConfig` != rhs.`timezoneConfig` {
            return false
        }
        if lhs.`graphqlUrl` != rhs.`graphqlUrl` {
            return false
        }
        if lhs.`backendHealthUrl` != rhs.`backendHealthUrl` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`network`)
        hasher.combine(`seed`)
        hasher.combine(`fiatCurrency`)
        hasher.combine(`esploraApiUrl`)
        hasher.combine(`rgsUrl`)
        hasher.combine(`lspUrl`)
        hasher.combine(`lspToken`)
        hasher.combine(`localPersistencePath`)
        hasher.combine(`timezoneConfig`)
        hasher.combine(`graphqlUrl`)
        hasher.combine(`backendHealthUrl`)
    }
}


public struct FfiConverterTypeConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Config {
        return try Config(
            `network`: FfiConverterTypeNetwork.read(from: &buf), 
            `seed`: FfiConverterSequenceUInt8.read(from: &buf), 
            `fiatCurrency`: FfiConverterString.read(from: &buf), 
            `esploraApiUrl`: FfiConverterString.read(from: &buf), 
            `rgsUrl`: FfiConverterString.read(from: &buf), 
            `lspUrl`: FfiConverterString.read(from: &buf), 
            `lspToken`: FfiConverterString.read(from: &buf), 
            `localPersistencePath`: FfiConverterString.read(from: &buf), 
            `timezoneConfig`: FfiConverterTypeTzConfig.read(from: &buf), 
            `graphqlUrl`: FfiConverterString.read(from: &buf), 
            `backendHealthUrl`: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Config, into buf: inout [UInt8]) {
        FfiConverterTypeNetwork.write(value.`network`, into: &buf)
        FfiConverterSequenceUInt8.write(value.`seed`, into: &buf)
        FfiConverterString.write(value.`fiatCurrency`, into: &buf)
        FfiConverterString.write(value.`esploraApiUrl`, into: &buf)
        FfiConverterString.write(value.`rgsUrl`, into: &buf)
        FfiConverterString.write(value.`lspUrl`, into: &buf)
        FfiConverterString.write(value.`lspToken`, into: &buf)
        FfiConverterString.write(value.`localPersistencePath`, into: &buf)
        FfiConverterTypeTzConfig.write(value.`timezoneConfig`, into: &buf)
        FfiConverterString.write(value.`graphqlUrl`, into: &buf)
        FfiConverterString.write(value.`backendHealthUrl`, into: &buf)
    }
}


public func FfiConverterTypeConfig_lift(_ buf: RustBuffer) throws -> Config {
    return try FfiConverterTypeConfig.lift(buf)
}

public func FfiConverterTypeConfig_lower(_ value: Config) -> RustBuffer {
    return FfiConverterTypeConfig.lower(value)
}


public struct ExchangeRates {
    public var `defaultCurrency`: UInt32
    public var `usd`: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`defaultCurrency`: UInt32, `usd`: UInt32) {
        self.`defaultCurrency` = `defaultCurrency`
        self.`usd` = `usd`
    }
}


extension ExchangeRates: Equatable, Hashable {
    public static func ==(lhs: ExchangeRates, rhs: ExchangeRates) -> Bool {
        if lhs.`defaultCurrency` != rhs.`defaultCurrency` {
            return false
        }
        if lhs.`usd` != rhs.`usd` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`defaultCurrency`)
        hasher.combine(`usd`)
    }
}


public struct FfiConverterTypeExchangeRates: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ExchangeRates {
        return try ExchangeRates(
            `defaultCurrency`: FfiConverterUInt32.read(from: &buf), 
            `usd`: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: ExchangeRates, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.`defaultCurrency`, into: &buf)
        FfiConverterUInt32.write(value.`usd`, into: &buf)
    }
}


public func FfiConverterTypeExchangeRates_lift(_ buf: RustBuffer) throws -> ExchangeRates {
    return try FfiConverterTypeExchangeRates.lift(buf)
}

public func FfiConverterTypeExchangeRates_lower(_ value: ExchangeRates) -> RustBuffer {
    return FfiConverterTypeExchangeRates.lower(value)
}


public struct FiatValues {
    public var `fiat`: String
    public var `amount`: UInt64
    public var `amountUsd`: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`fiat`: String, `amount`: UInt64, `amountUsd`: UInt64) {
        self.`fiat` = `fiat`
        self.`amount` = `amount`
        self.`amountUsd` = `amountUsd`
    }
}


extension FiatValues: Equatable, Hashable {
    public static func ==(lhs: FiatValues, rhs: FiatValues) -> Bool {
        if lhs.`fiat` != rhs.`fiat` {
            return false
        }
        if lhs.`amount` != rhs.`amount` {
            return false
        }
        if lhs.`amountUsd` != rhs.`amountUsd` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`fiat`)
        hasher.combine(`amount`)
        hasher.combine(`amountUsd`)
    }
}


public struct FfiConverterTypeFiatValues: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FiatValues {
        return try FiatValues(
            `fiat`: FfiConverterString.read(from: &buf), 
            `amount`: FfiConverterUInt64.read(from: &buf), 
            `amountUsd`: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: FiatValues, into buf: inout [UInt8]) {
        FfiConverterString.write(value.`fiat`, into: &buf)
        FfiConverterUInt64.write(value.`amount`, into: &buf)
        FfiConverterUInt64.write(value.`amountUsd`, into: &buf)
    }
}


public func FfiConverterTypeFiatValues_lift(_ buf: RustBuffer) throws -> FiatValues {
    return try FfiConverterTypeFiatValues.lift(buf)
}

public func FfiConverterTypeFiatValues_lower(_ value: FiatValues) -> RustBuffer {
    return FfiConverterTypeFiatValues.lower(value)
}


public struct InvoiceDetails {
    public var `invoice`: String
    public var `amountMsat`: UInt64?
    public var `description`: String
    public var `paymentHash`: String
    public var `payeePubKey`: String
    public var `invoiceTimestamp`: Date
    public var `expiryInterval`: TimeInterval

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`invoice`: String, `amountMsat`: UInt64?, `description`: String, `paymentHash`: String, `payeePubKey`: String, `invoiceTimestamp`: Date, `expiryInterval`: TimeInterval) {
        self.`invoice` = `invoice`
        self.`amountMsat` = `amountMsat`
        self.`description` = `description`
        self.`paymentHash` = `paymentHash`
        self.`payeePubKey` = `payeePubKey`
        self.`invoiceTimestamp` = `invoiceTimestamp`
        self.`expiryInterval` = `expiryInterval`
    }
}


extension InvoiceDetails: Equatable, Hashable {
    public static func ==(lhs: InvoiceDetails, rhs: InvoiceDetails) -> Bool {
        if lhs.`invoice` != rhs.`invoice` {
            return false
        }
        if lhs.`amountMsat` != rhs.`amountMsat` {
            return false
        }
        if lhs.`description` != rhs.`description` {
            return false
        }
        if lhs.`paymentHash` != rhs.`paymentHash` {
            return false
        }
        if lhs.`payeePubKey` != rhs.`payeePubKey` {
            return false
        }
        if lhs.`invoiceTimestamp` != rhs.`invoiceTimestamp` {
            return false
        }
        if lhs.`expiryInterval` != rhs.`expiryInterval` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`invoice`)
        hasher.combine(`amountMsat`)
        hasher.combine(`description`)
        hasher.combine(`paymentHash`)
        hasher.combine(`payeePubKey`)
        hasher.combine(`invoiceTimestamp`)
        hasher.combine(`expiryInterval`)
    }
}


public struct FfiConverterTypeInvoiceDetails: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InvoiceDetails {
        return try InvoiceDetails(
            `invoice`: FfiConverterString.read(from: &buf), 
            `amountMsat`: FfiConverterOptionUInt64.read(from: &buf), 
            `description`: FfiConverterString.read(from: &buf), 
            `paymentHash`: FfiConverterString.read(from: &buf), 
            `payeePubKey`: FfiConverterString.read(from: &buf), 
            `invoiceTimestamp`: FfiConverterTimestamp.read(from: &buf), 
            `expiryInterval`: FfiConverterDuration.read(from: &buf)
        )
    }

    public static func write(_ value: InvoiceDetails, into buf: inout [UInt8]) {
        FfiConverterString.write(value.`invoice`, into: &buf)
        FfiConverterOptionUInt64.write(value.`amountMsat`, into: &buf)
        FfiConverterString.write(value.`description`, into: &buf)
        FfiConverterString.write(value.`paymentHash`, into: &buf)
        FfiConverterString.write(value.`payeePubKey`, into: &buf)
        FfiConverterTimestamp.write(value.`invoiceTimestamp`, into: &buf)
        FfiConverterDuration.write(value.`expiryInterval`, into: &buf)
    }
}


public func FfiConverterTypeInvoiceDetails_lift(_ buf: RustBuffer) throws -> InvoiceDetails {
    return try FfiConverterTypeInvoiceDetails.lift(buf)
}

public func FfiConverterTypeInvoiceDetails_lower(_ value: InvoiceDetails) -> RustBuffer {
    return FfiConverterTypeInvoiceDetails.lower(value)
}


public struct LspFee {
    public var `channelMinimumFeeMsat`: UInt64
    public var `channelFeePermyriad`: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`channelMinimumFeeMsat`: UInt64, `channelFeePermyriad`: UInt64) {
        self.`channelMinimumFeeMsat` = `channelMinimumFeeMsat`
        self.`channelFeePermyriad` = `channelFeePermyriad`
    }
}


extension LspFee: Equatable, Hashable {
    public static func ==(lhs: LspFee, rhs: LspFee) -> Bool {
        if lhs.`channelMinimumFeeMsat` != rhs.`channelMinimumFeeMsat` {
            return false
        }
        if lhs.`channelFeePermyriad` != rhs.`channelFeePermyriad` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`channelMinimumFeeMsat`)
        hasher.combine(`channelFeePermyriad`)
    }
}


public struct FfiConverterTypeLspFee: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LspFee {
        return try LspFee(
            `channelMinimumFeeMsat`: FfiConverterUInt64.read(from: &buf), 
            `channelFeePermyriad`: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: LspFee, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.`channelMinimumFeeMsat`, into: &buf)
        FfiConverterUInt64.write(value.`channelFeePermyriad`, into: &buf)
    }
}


public func FfiConverterTypeLspFee_lift(_ buf: RustBuffer) throws -> LspFee {
    return try FfiConverterTypeLspFee.lift(buf)
}

public func FfiConverterTypeLspFee_lower(_ value: LspFee) -> RustBuffer {
    return FfiConverterTypeLspFee.lower(value)
}


public struct NodeInfo {
    public var `nodePubkey`: [UInt8]
    public var `numPeers`: UInt16
    public var `channelsInfo`: ChannelsInfo

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`nodePubkey`: [UInt8], `numPeers`: UInt16, `channelsInfo`: ChannelsInfo) {
        self.`nodePubkey` = `nodePubkey`
        self.`numPeers` = `numPeers`
        self.`channelsInfo` = `channelsInfo`
    }
}


extension NodeInfo: Equatable, Hashable {
    public static func ==(lhs: NodeInfo, rhs: NodeInfo) -> Bool {
        if lhs.`nodePubkey` != rhs.`nodePubkey` {
            return false
        }
        if lhs.`numPeers` != rhs.`numPeers` {
            return false
        }
        if lhs.`channelsInfo` != rhs.`channelsInfo` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`nodePubkey`)
        hasher.combine(`numPeers`)
        hasher.combine(`channelsInfo`)
    }
}


public struct FfiConverterTypeNodeInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NodeInfo {
        return try NodeInfo(
            `nodePubkey`: FfiConverterSequenceUInt8.read(from: &buf), 
            `numPeers`: FfiConverterUInt16.read(from: &buf), 
            `channelsInfo`: FfiConverterTypeChannelsInfo.read(from: &buf)
        )
    }

    public static func write(_ value: NodeInfo, into buf: inout [UInt8]) {
        FfiConverterSequenceUInt8.write(value.`nodePubkey`, into: &buf)
        FfiConverterUInt16.write(value.`numPeers`, into: &buf)
        FfiConverterTypeChannelsInfo.write(value.`channelsInfo`, into: &buf)
    }
}


public func FfiConverterTypeNodeInfo_lift(_ buf: RustBuffer) throws -> NodeInfo {
    return try FfiConverterTypeNodeInfo.lift(buf)
}

public func FfiConverterTypeNodeInfo_lower(_ value: NodeInfo) -> RustBuffer {
    return FfiConverterTypeNodeInfo.lower(value)
}


public struct Payment {
    public var `paymentType`: PaymentType
    public var `paymentState`: PaymentState
    public var `hash`: String
    public var `amountMsat`: UInt64
    public var `invoice`: String
    public var `createdAt`: TzTime
    public var `latestStateChangeAt`: TzTime
    public var `description`: String
    public var `preimage`: String?
    public var `networkFeesMsat`: UInt64?
    public var `lspFeesMsat`: UInt64?
    public var `fiatValues`: FiatValues?
    public var `metadata`: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`paymentType`: PaymentType, `paymentState`: PaymentState, `hash`: String, `amountMsat`: UInt64, `invoice`: String, `createdAt`: TzTime, `latestStateChangeAt`: TzTime, `description`: String, `preimage`: String?, `networkFeesMsat`: UInt64?, `lspFeesMsat`: UInt64?, `fiatValues`: FiatValues?, `metadata`: String) {
        self.`paymentType` = `paymentType`
        self.`paymentState` = `paymentState`
        self.`hash` = `hash`
        self.`amountMsat` = `amountMsat`
        self.`invoice` = `invoice`
        self.`createdAt` = `createdAt`
        self.`latestStateChangeAt` = `latestStateChangeAt`
        self.`description` = `description`
        self.`preimage` = `preimage`
        self.`networkFeesMsat` = `networkFeesMsat`
        self.`lspFeesMsat` = `lspFeesMsat`
        self.`fiatValues` = `fiatValues`
        self.`metadata` = `metadata`
    }
}


extension Payment: Equatable, Hashable {
    public static func ==(lhs: Payment, rhs: Payment) -> Bool {
        if lhs.`paymentType` != rhs.`paymentType` {
            return false
        }
        if lhs.`paymentState` != rhs.`paymentState` {
            return false
        }
        if lhs.`hash` != rhs.`hash` {
            return false
        }
        if lhs.`amountMsat` != rhs.`amountMsat` {
            return false
        }
        if lhs.`invoice` != rhs.`invoice` {
            return false
        }
        if lhs.`createdAt` != rhs.`createdAt` {
            return false
        }
        if lhs.`latestStateChangeAt` != rhs.`latestStateChangeAt` {
            return false
        }
        if lhs.`description` != rhs.`description` {
            return false
        }
        if lhs.`preimage` != rhs.`preimage` {
            return false
        }
        if lhs.`networkFeesMsat` != rhs.`networkFeesMsat` {
            return false
        }
        if lhs.`lspFeesMsat` != rhs.`lspFeesMsat` {
            return false
        }
        if lhs.`fiatValues` != rhs.`fiatValues` {
            return false
        }
        if lhs.`metadata` != rhs.`metadata` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`paymentType`)
        hasher.combine(`paymentState`)
        hasher.combine(`hash`)
        hasher.combine(`amountMsat`)
        hasher.combine(`invoice`)
        hasher.combine(`createdAt`)
        hasher.combine(`latestStateChangeAt`)
        hasher.combine(`description`)
        hasher.combine(`preimage`)
        hasher.combine(`networkFeesMsat`)
        hasher.combine(`lspFeesMsat`)
        hasher.combine(`fiatValues`)
        hasher.combine(`metadata`)
    }
}


public struct FfiConverterTypePayment: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Payment {
        return try Payment(
            `paymentType`: FfiConverterTypePaymentType.read(from: &buf), 
            `paymentState`: FfiConverterTypePaymentState.read(from: &buf), 
            `hash`: FfiConverterString.read(from: &buf), 
            `amountMsat`: FfiConverterUInt64.read(from: &buf), 
            `invoice`: FfiConverterString.read(from: &buf), 
            `createdAt`: FfiConverterTypeTzTime.read(from: &buf), 
            `latestStateChangeAt`: FfiConverterTypeTzTime.read(from: &buf), 
            `description`: FfiConverterString.read(from: &buf), 
            `preimage`: FfiConverterOptionString.read(from: &buf), 
            `networkFeesMsat`: FfiConverterOptionUInt64.read(from: &buf), 
            `lspFeesMsat`: FfiConverterOptionUInt64.read(from: &buf), 
            `fiatValues`: FfiConverterOptionTypeFiatValues.read(from: &buf), 
            `metadata`: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Payment, into buf: inout [UInt8]) {
        FfiConverterTypePaymentType.write(value.`paymentType`, into: &buf)
        FfiConverterTypePaymentState.write(value.`paymentState`, into: &buf)
        FfiConverterString.write(value.`hash`, into: &buf)
        FfiConverterUInt64.write(value.`amountMsat`, into: &buf)
        FfiConverterString.write(value.`invoice`, into: &buf)
        FfiConverterTypeTzTime.write(value.`createdAt`, into: &buf)
        FfiConverterTypeTzTime.write(value.`latestStateChangeAt`, into: &buf)
        FfiConverterString.write(value.`description`, into: &buf)
        FfiConverterOptionString.write(value.`preimage`, into: &buf)
        FfiConverterOptionUInt64.write(value.`networkFeesMsat`, into: &buf)
        FfiConverterOptionUInt64.write(value.`lspFeesMsat`, into: &buf)
        FfiConverterOptionTypeFiatValues.write(value.`fiatValues`, into: &buf)
        FfiConverterString.write(value.`metadata`, into: &buf)
    }
}


public func FfiConverterTypePayment_lift(_ buf: RustBuffer) throws -> Payment {
    return try FfiConverterTypePayment.lift(buf)
}

public func FfiConverterTypePayment_lower(_ value: Payment) -> RustBuffer {
    return FfiConverterTypePayment.lower(value)
}


public struct Secret {
    public var `mnemonic`: [String]
    public var `passphrase`: String
    public var `seed`: [UInt8]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`mnemonic`: [String], `passphrase`: String, `seed`: [UInt8]) {
        self.`mnemonic` = `mnemonic`
        self.`passphrase` = `passphrase`
        self.`seed` = `seed`
    }
}


extension Secret: Equatable, Hashable {
    public static func ==(lhs: Secret, rhs: Secret) -> Bool {
        if lhs.`mnemonic` != rhs.`mnemonic` {
            return false
        }
        if lhs.`passphrase` != rhs.`passphrase` {
            return false
        }
        if lhs.`seed` != rhs.`seed` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`mnemonic`)
        hasher.combine(`passphrase`)
        hasher.combine(`seed`)
    }
}


public struct FfiConverterTypeSecret: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Secret {
        return try Secret(
            `mnemonic`: FfiConverterSequenceString.read(from: &buf), 
            `passphrase`: FfiConverterString.read(from: &buf), 
            `seed`: FfiConverterSequenceUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: Secret, into buf: inout [UInt8]) {
        FfiConverterSequenceString.write(value.`mnemonic`, into: &buf)
        FfiConverterString.write(value.`passphrase`, into: &buf)
        FfiConverterSequenceUInt8.write(value.`seed`, into: &buf)
    }
}


public func FfiConverterTypeSecret_lift(_ buf: RustBuffer) throws -> Secret {
    return try FfiConverterTypeSecret.lift(buf)
}

public func FfiConverterTypeSecret_lower(_ value: Secret) -> RustBuffer {
    return FfiConverterTypeSecret.lower(value)
}


public struct TzConfig {
    public var `timezoneId`: String
    public var `timezoneUtcOffsetSecs`: Int32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`timezoneId`: String, `timezoneUtcOffsetSecs`: Int32) {
        self.`timezoneId` = `timezoneId`
        self.`timezoneUtcOffsetSecs` = `timezoneUtcOffsetSecs`
    }
}


extension TzConfig: Equatable, Hashable {
    public static func ==(lhs: TzConfig, rhs: TzConfig) -> Bool {
        if lhs.`timezoneId` != rhs.`timezoneId` {
            return false
        }
        if lhs.`timezoneUtcOffsetSecs` != rhs.`timezoneUtcOffsetSecs` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`timezoneId`)
        hasher.combine(`timezoneUtcOffsetSecs`)
    }
}


public struct FfiConverterTypeTzConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TzConfig {
        return try TzConfig(
            `timezoneId`: FfiConverterString.read(from: &buf), 
            `timezoneUtcOffsetSecs`: FfiConverterInt32.read(from: &buf)
        )
    }

    public static func write(_ value: TzConfig, into buf: inout [UInt8]) {
        FfiConverterString.write(value.`timezoneId`, into: &buf)
        FfiConverterInt32.write(value.`timezoneUtcOffsetSecs`, into: &buf)
    }
}


public func FfiConverterTypeTzConfig_lift(_ buf: RustBuffer) throws -> TzConfig {
    return try FfiConverterTypeTzConfig.lift(buf)
}

public func FfiConverterTypeTzConfig_lower(_ value: TzConfig) -> RustBuffer {
    return FfiConverterTypeTzConfig.lower(value)
}


public struct TzTime {
    public var `timestamp`: Date
    public var `timezoneId`: String
    public var `timezoneUtcOffsetSecs`: Int32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`timestamp`: Date, `timezoneId`: String, `timezoneUtcOffsetSecs`: Int32) {
        self.`timestamp` = `timestamp`
        self.`timezoneId` = `timezoneId`
        self.`timezoneUtcOffsetSecs` = `timezoneUtcOffsetSecs`
    }
}


extension TzTime: Equatable, Hashable {
    public static func ==(lhs: TzTime, rhs: TzTime) -> Bool {
        if lhs.`timestamp` != rhs.`timestamp` {
            return false
        }
        if lhs.`timezoneId` != rhs.`timezoneId` {
            return false
        }
        if lhs.`timezoneUtcOffsetSecs` != rhs.`timezoneUtcOffsetSecs` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`timestamp`)
        hasher.combine(`timezoneId`)
        hasher.combine(`timezoneUtcOffsetSecs`)
    }
}


public struct FfiConverterTypeTzTime: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TzTime {
        return try TzTime(
            `timestamp`: FfiConverterTimestamp.read(from: &buf), 
            `timezoneId`: FfiConverterString.read(from: &buf), 
            `timezoneUtcOffsetSecs`: FfiConverterInt32.read(from: &buf)
        )
    }

    public static func write(_ value: TzTime, into buf: inout [UInt8]) {
        FfiConverterTimestamp.write(value.`timestamp`, into: &buf)
        FfiConverterString.write(value.`timezoneId`, into: &buf)
        FfiConverterInt32.write(value.`timezoneUtcOffsetSecs`, into: &buf)
    }
}


public func FfiConverterTypeTzTime_lift(_ buf: RustBuffer) throws -> TzTime {
    return try FfiConverterTypeTzTime.lift(buf)
}

public func FfiConverterTypeTzTime_lower(_ value: TzTime) -> RustBuffer {
    return FfiConverterTypeTzTime.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum LogLevel {
    
    case `error`
    case `warn`
    case `info`
    case `debug`
    case `trace`
}

public struct FfiConverterTypeLogLevel: FfiConverterRustBuffer {
    typealias SwiftType = LogLevel

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LogLevel {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`error`
        
        case 2: return .`warn`
        
        case 3: return .`info`
        
        case 4: return .`debug`
        
        case 5: return .`trace`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LogLevel, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`error`:
            writeInt(&buf, Int32(1))
        
        
        case .`warn`:
            writeInt(&buf, Int32(2))
        
        
        case .`info`:
            writeInt(&buf, Int32(3))
        
        
        case .`debug`:
            writeInt(&buf, Int32(4))
        
        
        case .`trace`:
            writeInt(&buf, Int32(5))
        
        }
    }
}


public func FfiConverterTypeLogLevel_lift(_ buf: RustBuffer) throws -> LogLevel {
    return try FfiConverterTypeLogLevel.lift(buf)
}

public func FfiConverterTypeLogLevel_lower(_ value: LogLevel) -> RustBuffer {
    return FfiConverterTypeLogLevel.lower(value)
}


extension LogLevel: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Network {
    
    case `bitcoin`
    case `testnet`
    case `signet`
    case `regtest`
}

public struct FfiConverterTypeNetwork: FfiConverterRustBuffer {
    typealias SwiftType = Network

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Network {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`bitcoin`
        
        case 2: return .`testnet`
        
        case 3: return .`signet`
        
        case 4: return .`regtest`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Network, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`bitcoin`:
            writeInt(&buf, Int32(1))
        
        
        case .`testnet`:
            writeInt(&buf, Int32(2))
        
        
        case .`signet`:
            writeInt(&buf, Int32(3))
        
        
        case .`regtest`:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeNetwork_lift(_ buf: RustBuffer) throws -> Network {
    return try FfiConverterTypeNetwork.lift(buf)
}

public func FfiConverterTypeNetwork_lower(_ value: Network) -> RustBuffer {
    return FfiConverterTypeNetwork.lower(value)
}


extension Network: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum PaymentState {
    
    case `created`
    case `succeeded`
    case `failed`
}

public struct FfiConverterTypePaymentState: FfiConverterRustBuffer {
    typealias SwiftType = PaymentState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`created`
        
        case 2: return .`succeeded`
        
        case 3: return .`failed`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`created`:
            writeInt(&buf, Int32(1))
        
        
        case .`succeeded`:
            writeInt(&buf, Int32(2))
        
        
        case .`failed`:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypePaymentState_lift(_ buf: RustBuffer) throws -> PaymentState {
    return try FfiConverterTypePaymentState.lift(buf)
}

public func FfiConverterTypePaymentState_lower(_ value: PaymentState) -> RustBuffer {
    return FfiConverterTypePaymentState.lower(value)
}


extension PaymentState: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum PaymentType {
    
    case `receiving`
    case `sending`
}

public struct FfiConverterTypePaymentType: FfiConverterRustBuffer {
    typealias SwiftType = PaymentType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`receiving`
        
        case 2: return .`sending`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`receiving`:
            writeInt(&buf, Int32(1))
        
        
        case .`sending`:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypePaymentType_lift(_ buf: RustBuffer) throws -> PaymentType {
    return try FfiConverterTypePaymentType.lift(buf)
}

public func FfiConverterTypePaymentType_lower(_ value: PaymentType) -> RustBuffer {
    return FfiConverterTypePaymentType.lower(value)
}


extension PaymentType: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum RuntimeErrorCode {
    
    case `esploraServiceUnavailable`
    case `exchangeRateProviderUnavailable`
    case `lspServiceUnavailable`
    case `remoteStorageError`
    case `rgsServiceUnavailable`
    case `rgsUpdateError`
    case `objectNotFound`
    case `alreadyUsedInvoice`
    case `noRouteFound`
    case `sendFailure`
    case `genericError`
}

public struct FfiConverterTypeRuntimeErrorCode: FfiConverterRustBuffer {
    typealias SwiftType = RuntimeErrorCode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RuntimeErrorCode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`esploraServiceUnavailable`
        
        case 2: return .`exchangeRateProviderUnavailable`
        
        case 3: return .`lspServiceUnavailable`
        
        case 4: return .`remoteStorageError`
        
        case 5: return .`rgsServiceUnavailable`
        
        case 6: return .`rgsUpdateError`
        
        case 7: return .`objectNotFound`
        
        case 8: return .`alreadyUsedInvoice`
        
        case 9: return .`noRouteFound`
        
        case 10: return .`sendFailure`
        
        case 11: return .`genericError`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RuntimeErrorCode, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`esploraServiceUnavailable`:
            writeInt(&buf, Int32(1))
        
        
        case .`exchangeRateProviderUnavailable`:
            writeInt(&buf, Int32(2))
        
        
        case .`lspServiceUnavailable`:
            writeInt(&buf, Int32(3))
        
        
        case .`remoteStorageError`:
            writeInt(&buf, Int32(4))
        
        
        case .`rgsServiceUnavailable`:
            writeInt(&buf, Int32(5))
        
        
        case .`rgsUpdateError`:
            writeInt(&buf, Int32(6))
        
        
        case .`objectNotFound`:
            writeInt(&buf, Int32(7))
        
        
        case .`alreadyUsedInvoice`:
            writeInt(&buf, Int32(8))
        
        
        case .`noRouteFound`:
            writeInt(&buf, Int32(9))
        
        
        case .`sendFailure`:
            writeInt(&buf, Int32(10))
        
        
        case .`genericError`:
            writeInt(&buf, Int32(11))
        
        }
    }
}


public func FfiConverterTypeRuntimeErrorCode_lift(_ buf: RustBuffer) throws -> RuntimeErrorCode {
    return try FfiConverterTypeRuntimeErrorCode.lift(buf)
}

public func FfiConverterTypeRuntimeErrorCode_lower(_ value: RuntimeErrorCode) -> RustBuffer {
    return FfiConverterTypeRuntimeErrorCode.lower(value)
}


extension RuntimeErrorCode: Equatable, Hashable {}



public enum LnError {

    
    
    case InvalidInput(`msg`: String)
    case RuntimeError(`code`: RuntimeErrorCode, `msg`: String)
    case PermanentFailure(`msg`: String)
}

public struct FfiConverterTypeLnError: FfiConverterRustBuffer {
    typealias SwiftType = LnError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidInput(
            `msg`: try FfiConverterString.read(from: &buf)
            )
        case 2: return .RuntimeError(
            `code`: try FfiConverterTypeRuntimeErrorCode.read(from: &buf), 
            `msg`: try FfiConverterString.read(from: &buf)
            )
        case 3: return .PermanentFailure(
            `msg`: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LnError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .InvalidInput(`msg`):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(`msg`, into: &buf)
            
        
        case let .RuntimeError(`code`,`msg`):
            writeInt(&buf, Int32(2))
            FfiConverterTypeRuntimeErrorCode.write(`code`, into: &buf)
            FfiConverterString.write(`msg`, into: &buf)
            
        
        case let .PermanentFailure(`msg`):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(`msg`, into: &buf)
            
        }
    }
}


extension LnError: Equatable, Hashable {}

extension LnError: Error { }

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate typealias UniFFICallbackHandle = UInt64
fileprivate class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 0
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0

// Declaration and FfiConverters for EventsCallback Callback Interface

public protocol EventsCallback : AnyObject {
    func `paymentReceived`(`paymentHash`: String, `amountMsat`: UInt64) 
    func `paymentSent`(`paymentHash`: String, `paymentPreimage`: String, `feePaidMsat`: UInt64) 
    func `paymentFailed`(`paymentHash`: String) 
    func `channelClosed`(`channelId`: String, `reason`: String) 
    
}

// The ForeignCallback that is passed to Rust.
fileprivate let foreignCallbackCallbackInterfaceEventsCallback : ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func `invokePaymentReceived`(_ swiftCallbackInterface: EventsCallback, _ args: RustBuffer) throws -> RustBuffer {
        defer { args.deallocate() }

            var reader = createReader(data: Data(rustBuffer: args))
            swiftCallbackInterface.`paymentReceived`(
                    `paymentHash`:  try FfiConverterString.read(from: &reader), 
                    `amountMsat`:  try FfiConverterUInt64.read(from: &reader)
                    )
            return RustBuffer()
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351

        }
        func `invokePaymentSent`(_ swiftCallbackInterface: EventsCallback, _ args: RustBuffer) throws -> RustBuffer {
        defer { args.deallocate() }

            var reader = createReader(data: Data(rustBuffer: args))
            swiftCallbackInterface.`paymentSent`(
                    `paymentHash`:  try FfiConverterString.read(from: &reader), 
                    `paymentPreimage`:  try FfiConverterString.read(from: &reader), 
                    `feePaidMsat`:  try FfiConverterUInt64.read(from: &reader)
                    )
            return RustBuffer()
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351

        }
        func `invokePaymentFailed`(_ swiftCallbackInterface: EventsCallback, _ args: RustBuffer) throws -> RustBuffer {
        defer { args.deallocate() }

            var reader = createReader(data: Data(rustBuffer: args))
            swiftCallbackInterface.`paymentFailed`(
                    `paymentHash`:  try FfiConverterString.read(from: &reader)
                    )
            return RustBuffer()
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351

        }
        func `invokeChannelClosed`(_ swiftCallbackInterface: EventsCallback, _ args: RustBuffer) throws -> RustBuffer {
        defer { args.deallocate() }

            var reader = createReader(data: Data(rustBuffer: args))
            swiftCallbackInterface.`channelClosed`(
                    `channelId`:  try FfiConverterString.read(from: &reader), 
                    `reason`:  try FfiConverterString.read(from: &reader)
                    )
            return RustBuffer()
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351

        }
        

        let cb: EventsCallback
        do {
            cb = try FfiConverterCallbackInterfaceEventsCallback.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("EventsCallback: Invalid handle")
            return -1
        }

        switch method {
            case IDX_CALLBACK_FREE:
                FfiConverterCallbackInterfaceEventsCallback.drop(handle: handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 0
            case 1:
                do {
                    out_buf.pointee = try `invokePaymentReceived`(cb, args)
                    // Value written to out buffer.
                    // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                    return 1
                } catch let error {
                    out_buf.pointee = FfiConverterString.lower(String(describing: error))
                    return -1
                }
            case 2:
                do {
                    out_buf.pointee = try `invokePaymentSent`(cb, args)
                    // Value written to out buffer.
                    // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                    return 1
                } catch let error {
                    out_buf.pointee = FfiConverterString.lower(String(describing: error))
                    return -1
                }
            case 3:
                do {
                    out_buf.pointee = try `invokePaymentFailed`(cb, args)
                    // Value written to out buffer.
                    // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                    return 1
                } catch let error {
                    out_buf.pointee = FfiConverterString.lower(String(describing: error))
                    return -1
                }
            case 4:
                do {
                    out_buf.pointee = try `invokeChannelClosed`(cb, args)
                    // Value written to out buffer.
                    // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                    return 1
                } catch let error {
                    out_buf.pointee = FfiConverterString.lower(String(describing: error))
                    return -1
                }
            
            // This should never happen, because an out of bounds method index won't
            // ever be used. Once we can catch errors, we should return an InternalError.
            // https://github.com/mozilla/uniffi-rs/issues/351
            default:
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return -1
        }
    }

// FfiConverter protocol for callback interfaces
fileprivate struct FfiConverterCallbackInterfaceEventsCallback {
    // Initialize our callback method with the scaffolding code
    private static var callbackInitialized = false
    private static func initCallback() {
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
                ffi_lipalightninglib_3a2_EventsCallback_init_callback(foreignCallbackCallbackInterfaceEventsCallback, err)
        }
    }
    private static func ensureCallbackinitialized() {
        if !callbackInitialized {
            initCallback()
            callbackInitialized = true
        }
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<EventsCallback>()
}

extension FfiConverterCallbackInterfaceEventsCallback : FfiConverter {
    typealias SwiftType = EventsCallback
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized();
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized();
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized();
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized();
        writeInt(&buf, lower(v))
    }
}

fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeFiatValues: FfiConverterRustBuffer {
    typealias SwiftType = FiatValues?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeFiatValues.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeFiatValues.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypePayment: FfiConverterRustBuffer {
    typealias SwiftType = [Payment]

    public static func write(_ value: [Payment], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePayment.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Payment] {
        let len: Int32 = try readInt(&buf)
        var seq = [Payment]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePayment.read(from: &buf))
        }
        return seq
    }
}

public func `initNativeLoggerOnce`(`minLevel`: LogLevel)  {
    try!
    
    rustCall() {
    
    lipalightninglib_3a2_init_native_logger_once(
        FfiConverterTypeLogLevel.lower(`minLevel`), $0)
}
}


public func `generateSecret`(`passphrase`: String) throws -> Secret {
    return try FfiConverterTypeSecret.lift(
        try
    
    rustCallWithError(FfiConverterTypeLnError.self) {
    
    lipalightninglib_3a2_generate_secret(
        FfiConverterString.lower(`passphrase`), $0)
}
    )
}



public func `mnemonicToSecret`(`mnemonicString`: [String], `passphrase`: String) throws -> Secret {
    return try FfiConverterTypeSecret.lift(
        try
    
    rustCallWithError(FfiConverterTypeLnError.self) {
    
    lipalightninglib_3a2_mnemonic_to_secret(
        FfiConverterSequenceString.lower(`mnemonicString`), 
        FfiConverterString.lower(`passphrase`), $0)
}
    )
}



public func `wordsByPrefix`(`prefix`: String)  -> [String] {
    return try! FfiConverterSequenceString.lift(
        try!
    
    rustCall() {
    
    lipalightninglib_3a2_words_by_prefix(
        FfiConverterString.lower(`prefix`), $0)
}
    )
}



/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum LipalightninglibLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {
    }
}